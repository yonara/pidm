{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nimport { findHandler } from \"../handlersRegistry\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar dummyStateManager = {\n  begin: function begin() {\n    console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');\n  },\n  activate: function activate() {\n    console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');\n  },\n  end: function end() {\n    console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');\n  },\n  fail: function fail() {\n    console.warn('You have to use react-native-reanimated in order to control the state of the gesture.');\n  }\n};\n\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\n\nfunction onGestureHandlerEvent(event) {\n  var _handler$handlers5, _handler$handlers5$on, _handler$handlers6, _handler$handlers6$on, _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on;\n\n  var handler = findHandler(event.handlerTag);\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onE, _handler$handlers3;\n\n        (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onE2, _handler$handlers4;\n\n        (_handler$handlers$onE2 = (_handler$handlers4 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers4, event, false);\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          (_handler$handlers5 = handler.handlers) === null || _handler$handlers5 === void 0 ? void 0 : (_handler$handlers5$on = _handler$handlers5.onTouchesDown) === null || _handler$handlers5$on === void 0 ? void 0 : _handler$handlers5$on.call(_handler$handlers5, event, dummyStateManager);\n          break;\n\n        case EventType.TOUCHES_MOVE:\n          (_handler$handlers6 = handler.handlers) === null || _handler$handlers6 === void 0 ? void 0 : (_handler$handlers6$on = _handler$handlers6.onTouchesMove) === null || _handler$handlers6$on === void 0 ? void 0 : _handler$handlers6$on.call(_handler$handlers6, event, dummyStateManager);\n          break;\n\n        case EventType.TOUCHES_UP:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesUp) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, dummyStateManager);\n          break;\n\n        case EventType.TOUCHES_CANCELLED:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesCancelled) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, dummyStateManager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers9;\n\n      (_handler$handlers$onU = (_handler$handlers9 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers9, event);\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerStateChangeEventSubscription);\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","activate","end","fail","event","handler","findHandler","isStateChangeEvent","State","isTouchEvent","EventType","stopListening","DeviceEventEmitter"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  activate: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  end: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  fail: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n};\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nfunction onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        handler.handlers.onEnd?.(event, true);\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        handler.handlers.onEnd?.(event, false);\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(\n      gestureHandlerStateChangeEventSubscription\n    );\n\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}